// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFCLPortal.EntityFrameworkCore;

namespace TFCLPortal.Migrations
{
    [DbContext(typeof(TFCLPortalDbContext))]
    [Migration("20201016104707_GuarantorDetailAppService")]
    partial class GuarantorDetailAppService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("TFCLPortal.ApiCallLogs.ApiCallLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FunctionName");

                    b.Property<string>("Input");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("ApiCallLog");
                });

            modelBuilder.Entity("TFCLPortal.AppScreenStatuses.AppScreenStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenCode");

                    b.Property<string>("ScreenName");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.ToTable("AppScreenStatus");
                });

            modelBuilder.Entity("TFCLPortal.Applications.Applicationz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ApplicantSource");

                    b.Property<int>("ApplicationId");

                    b.Property<int?>("ApplicationNumber");

                    b.Property<int>("AreaOfSchoolMarla");

                    b.Property<string>("AverageFee");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BuildingStatus");

                    b.Property<string>("CNICNo");

                    b.Property<string>("ClientID");

                    b.Property<string>("ClientName");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DecesionMonth");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("FK_branchid");

                    b.Property<string>("InterestOtherProvider");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LandLineNo");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LastScreen");

                    b.Property<string>("MentionProviderInterest");

                    b.Property<string>("MobileNo");

                    b.Property<int>("MobilizationStatus");

                    b.Property<DateTime?>("NextMeeting");

                    b.Property<int>("NoOfStaff");

                    b.Property<int>("NoOfStudent");

                    b.Property<string>("PersonNotInterested");

                    b.Property<string>("PrefixLable");

                    b.Property<string>("ProductCode");

                    b.Property<int>("ProductType");

                    b.Property<string>("Remarks");

                    b.Property<string>("RespondantDesignation");

                    b.Property<string>("SchoolName");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.HasIndex("FK_branchid");

                    b.ToTable("Applicationz");
                });

            modelBuilder.Entity("TFCLPortal.AssetLiabilityDetails.AssetLiabilityDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<decimal>("AssetAccountReceivable");

                    b.Property<decimal>("AssetAirConditioners");

                    b.Property<decimal>("AssetBusinessNetWorth");

                    b.Property<decimal>("AssetCashInHandAtBank");

                    b.Property<decimal>("AssetCommittee");

                    b.Property<decimal>("AssetComputers");

                    b.Property<decimal>("AssetEquipment");

                    b.Property<decimal>("AssetFranchiseFee");

                    b.Property<decimal>("AssetFurnitureFixture");

                    b.Property<decimal>("AssetGeneratorUps");

                    b.Property<decimal>("AssetGirviAmount");

                    b.Property<decimal>("AssetHouseholdNetWorth");

                    b.Property<decimal>("AssetLandBuliding");

                    b.Property<DateTime>("AssetLiabilityAsOn");

                    b.Property<decimal>("AssetSolar");

                    b.Property<decimal>("AssetStockInHand");

                    b.Property<decimal>("AssetVehicle");

                    b.Property<decimal>("BorrowerNetWorthLiability");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("LiablityAccountPayable");

                    b.Property<decimal>("LiablityAdvanceReceived");

                    b.Property<decimal>("LiablityCommittee");

                    b.Property<decimal>("LiablityLoanPayebleBank");

                    b.Property<decimal>("LiablityStudentSecurityDeposit");

                    b.Property<decimal>("OtherAssets");

                    b.Property<decimal>("OtherLiablity");

                    b.Property<string>("ScreenStatus");

                    b.Property<decimal>("TotalBusinessAsset");

                    b.Property<decimal>("TotalBusinessLiability");

                    b.Property<decimal>("TotalHouseholdAsset");

                    b.Property<decimal>("TotalHouseholdLiability");

                    b.Property<int>("qtyAssetAccountReceivable");

                    b.Property<int>("qtyAssetAirConditioners");

                    b.Property<int>("qtyAssetCashInHandAtBank");

                    b.Property<int>("qtyAssetCommittee");

                    b.Property<int>("qtyAssetComputers");

                    b.Property<int>("qtyAssetEquipment");

                    b.Property<int>("qtyAssetFranchiseFee");

                    b.Property<int>("qtyAssetFurnitureFixture");

                    b.Property<int>("qtyAssetGeneratorUps");

                    b.Property<int>("qtyAssetGirviAmount");

                    b.Property<int>("qtyAssetLandBuliding");

                    b.Property<int>("qtyAssetSolar");

                    b.Property<int>("qtyAssetStockInHand");

                    b.Property<int>("qtyAssetVehicle");

                    b.Property<int>("qtyOtherAssets");

                    b.HasKey("Id");

                    b.ToTable("AssetLiabilityDetail");
                });

            modelBuilder.Entity("TFCLPortal.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("TFCLPortal.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<int?>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("IMEI");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("TFCLPortal.BankAccountDetails.BankAccountDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountTitle");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("BankName");

                    b.Property<string>("BranchName");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.ToTable("BankAccountDetail");
                });

            modelBuilder.Entity("TFCLPortal.Branches.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("BranchCode");

                    b.Property<string>("BranchName");

                    b.Property<string>("ContactPerson");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email");

                    b.Property<int>("FK_companyid");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("TelNo");

                    b.HasKey("Id");

                    b.HasIndex("FK_companyid");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("TFCLPortal.BusinessDetails.BusinessDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<int>("Canteen");

                    b.Property<string>("Comments");

                    b.Property<int>("ComputerLab");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("CurrentAddressSince");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("District");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime?>("EstablishedSince");

                    b.Property<int>("GenderOfTheStudent");

                    b.Property<string>("IfNoRegisteredWhy");

                    b.Property<string>("IsAnyFracnchiseOfSchoolNetwork");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsSchoolRegistered");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("Latitude");

                    b.Property<int>("LegalStatus");

                    b.Property<int>("Library");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Moza_Town");

                    b.Property<string>("NameOfFracnchiseSchoolNetwork");

                    b.Property<string>("NearestLandmark");

                    b.Property<int>("NoofClassRoom");

                    b.Property<int>("NoofStaffRoom");

                    b.Property<int>("NoofWashRoom");

                    b.Property<int>("NumberOfSchoolBranches");

                    b.Property<int>("PlayGround");

                    b.Property<string>("PreviousExperience");

                    b.Property<string>("Province");

                    b.Property<string>("RegisterAuthority");

                    b.Property<string>("RentAmount");

                    b.Property<string>("SELECT_ANY_OTHER_SCHOOL");

                    b.Property<string>("SchoolAddress");

                    b.Property<string>("SchoolLandLine");

                    b.Property<string>("SchoolName");

                    b.Property<string>("SchoolNtn");

                    b.Property<int>("SchoolPlaceOwnership");

                    b.Property<DateTime?>("SchoolRegisterSince");

                    b.Property<int>("SchoolType");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("Tehsil");

                    b.Property<string>("TotalExperienceInEducationIndustry");

                    b.Property<string>("UC_NO");

                    b.Property<bool?>("isActiveTaxPayer");

                    b.Property<bool?>("isOtherCampus");

                    b.HasKey("Id");

                    b.ToTable("BusinessDetail");
                });

            modelBuilder.Entity("TFCLPortal.BusinessDetails.School_Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademicSession");

                    b.Property<string>("AcademyName");

                    b.Property<int>("AdministrativeRooms");

                    b.Property<string>("AffiliatedBoardName");

                    b.Property<string>("AffiliationReasonNotRegistered");

                    b.Property<DateTime?>("AffiliationRegistrationExpiry");

                    b.Property<string>("AffiliationRegistrationNumber");

                    b.Property<DateTime?>("AffiliationSince");

                    b.Property<string>("AreaOfSchool");

                    b.Property<int>("AreaOfSchoolSqFt");

                    b.Property<int>("Auditoriums");

                    b.Property<string>("BusinessAge");

                    b.Property<int?>("BusinessType");

                    b.Property<string>("BusinessTypeOthers");

                    b.Property<int>("Canteens");

                    b.Property<int?>("Category");

                    b.Property<int>("ClassRooms");

                    b.Property<int?>("ClientBusinessClassification");

                    b.Property<int>("ComputerLabs");

                    b.Property<string>("ContactPreferences");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("CurrentAddressSince");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("District");

                    b.Property<DateTime?>("EstablishedSince");

                    b.Property<string>("FaxNo");

                    b.Property<int>("Fk_BusinessDetailID");

                    b.Property<string>("FranchiserName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("Latitude");

                    b.Property<int?>("LegalStatus");

                    b.Property<string>("LegalStatusOthers");

                    b.Property<int>("Libraries");

                    b.Property<decimal>("Longitude");

                    b.Property<int?>("MonthlyRent");

                    b.Property<decimal?>("MonthlyRentSharing");

                    b.Property<decimal?>("MonthlyShare");

                    b.Property<string>("Moza_Town");

                    b.Property<string>("NearestLandmark");

                    b.Property<int>("NoOfPartnersInvestorsDirectors");

                    b.Property<int>("NonTeachingStaffFemale");

                    b.Property<int>("NonTeachingStaffMale");

                    b.Property<string>("NonTeachingStaffRooms");

                    b.Property<int>("NonTeachingStaffTotal");

                    b.Property<string>("OfficialEmail");

                    b.Property<int>("PaidTeachingStaffFemale");

                    b.Property<int>("PaidTeachingStaffMale");

                    b.Property<int>("PaidTeachingStaffTotal");

                    b.Property<string>("PersonalEmail");

                    b.Property<int>("Playgrounds");

                    b.Property<string>("Province");

                    b.Property<string>("ReasonForNotRegistered");

                    b.Property<DateTime?>("RegisteredSince");

                    b.Property<string>("RegistrationAuthority");

                    b.Property<DateTime?>("RegistrationExpiry");

                    b.Property<string>("RegistrationNumber");

                    b.Property<string>("RegistrationStatus");

                    b.Property<DateTime?>("RentAgreementExpiryDate");

                    b.Property<int?>("RentAgreementSignatory");

                    b.Property<string>("SchoolAddress");

                    b.Property<int?>("SchoolBranchBusinessNature");

                    b.Property<string>("SchoolContactNo");

                    b.Property<int?>("SchoolLevel");

                    b.Property<string>("SchoolName");

                    b.Property<int>("SchoolPlaceOwnership");

                    b.Property<int>("ScienceLabs");

                    b.Property<int>("SectionsActiveClasses");

                    b.Property<string>("TeachingStaffRooms");

                    b.Property<string>("Tehsil");

                    b.Property<string>("TimeAtCurrentAddress");

                    b.Property<int>("TotalTeachingStaffFemale");

                    b.Property<int>("TotalTeachingStaffMale");

                    b.Property<int>("TotalTeachingStaffTotal");

                    b.Property<string>("UC_NO");

                    b.Property<int>("UnPaidTeachingStaffFemale");

                    b.Property<int>("UnPaidTeachingStaffMale");

                    b.Property<int>("UnPaidTeachingStaffTotal");

                    b.Property<int>("WashRooms");

                    b.Property<bool?>("isAcademy");

                    b.Property<bool?>("isBoardAffiliation");

                    b.Property<bool?>("isFranchise");

                    b.Property<int>("noOfPrograms");

                    b.Property<string>("otherBusinessNature");

                    b.Property<int>("percentageOfProfitShare");

                    b.Property<string>("rentAgreementSignatoryOthers");

                    b.HasKey("Id");

                    b.ToTable("School_Branch");
                });

            modelBuilder.Entity("TFCLPortal.BusinessExpenses.BusinessExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal>("Entertainment");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("NetMonthlyBusinessExpense");

                    b.Property<decimal>("OtherExpenses");

                    b.Property<decimal>("OtherSalary");

                    b.Property<decimal>("ProvisisonExpneses");

                    b.Property<decimal>("Rent");

                    b.Property<decimal>("RepairMaintenance");

                    b.Property<string>("ScreenStatus");

                    b.Property<decimal>("TeacherSalary");

                    b.Property<decimal>("TotalMonthlyExpneses");

                    b.Property<decimal>("Transportation");

                    b.Property<decimal>("Utilities");

                    b.HasKey("Id");

                    b.ToTable("BusinessExpense");
                });

            modelBuilder.Entity("TFCLPortal.BusinessIncomeAcademyClasses.BusinessIncomeSchoolAcademyClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BusinessIncomeChildAcademy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NoOfStudents");

                    b.Property<string>("PerStudentFee");

                    b.Property<string>("TotalFee");

                    b.HasKey("Id");

                    b.ToTable("BusinessIncomeSchoolAcademyClass");
                });

            modelBuilder.Entity("TFCLPortal.BusinessIncomeSchoolAcademies.BusinessIncomeSchoolAcademy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademyName");

                    b.Property<string>("ActualStudents");

                    b.Property<string>("CollectionEfficiency");

                    b.Property<string>("ConsideredAcademyFee");

                    b.Property<string>("ConsideredStudents");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BusinessIncomeChild");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReasonForDifference");

                    b.Property<string>("StudentDifference");

                    b.Property<string>("TotalFeeCalculation");

                    b.Property<string>("classesTotalAvgFee");

                    b.Property<string>("classesTotalStudents");

                    b.HasKey("Id");

                    b.ToTable("BusinessIncomeSchoolAcademy");
                });

            modelBuilder.Entity("TFCLPortal.BusinessIncomeSchoolClasses.BusinessIncomeSchoolClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FemaleStudents");

                    b.Property<int>("Fk_BusinessIncomeChild");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MaleStudents");

                    b.Property<string>("NoOfStudents");

                    b.Property<string>("PerStudentFee");

                    b.Property<string>("TotalFee");

                    b.HasKey("Id");

                    b.ToTable("BusinessIncomeSchoolClass");
                });

            modelBuilder.Entity("TFCLPortal.BusinessIncomeSchools.BusinessIncomeSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualStudents");

                    b.Property<string>("ClassName");

                    b.Property<string>("CollectionEfficiency");

                    b.Property<string>("ConsideredSchoolFee");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BusinessIncome");

                    b.Property<string>("GenderBalance");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NoOfStudents");

                    b.Property<string>("PerStudentFee");

                    b.Property<string>("ReasonForDifference");

                    b.Property<string>("SchoolName");

                    b.Property<string>("StudentClassroomRatio");

                    b.Property<string>("StudentTeacherRatio");

                    b.Property<string>("StudentsConsidered");

                    b.Property<string>("StudentsDifference");

                    b.Property<string>("TotalAvgFee");

                    b.Property<string>("TotalFee");

                    b.Property<string>("TotalStudentsFemale");

                    b.Property<string>("TotalStudentsMale");

                    b.Property<string>("TotalStudentsTotal");

                    b.Property<string>("totalFeeCollection");

                    b.HasKey("Id");

                    b.ToTable("BusinessIncomeSchool");
                });

            modelBuilder.Entity("TFCLPortal.BusinessIncomes.BusinessIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnyOtherIncome");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("GrandTotalIncome");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OtherSourceOfFund");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("TotalFeeCollection");

                    b.Property<string>("nGrandTotalAcademyFeeIncome");

                    b.Property<string>("nGrandTotalAcademyStudents");

                    b.Property<string>("nGrandTotalSchoolFeeIncome");

                    b.Property<string>("nGrandTotalSchoolStudents");

                    b.HasKey("Id");

                    b.ToTable("BusinessIncome");
                });

            modelBuilder.Entity("TFCLPortal.BusinessNatures.BusinessNature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BusinessNature");
                });

            modelBuilder.Entity("TFCLPortal.BusinessPlans.BusinessPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AmlCftCheck");

                    b.Property<bool?>("AmlCftClearance");

                    b.Property<string>("AmountCapitalExpenditure");

                    b.Property<string>("AmountWorkingCapital");

                    b.Property<DateTime?>("ApplicationDate");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("ApplicationNo");

                    b.Property<string>("ApprovalTaken");

                    b.Property<string>("BranchCode");

                    b.Property<string>("ClientExistInCelBel");

                    b.Property<bool?>("ClientInBell");

                    b.Property<bool?>("ClientInCell");

                    b.Property<string>("ClientShare");

                    b.Property<string>("CollateralGiven");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CreditBureauCheck");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoanAmountRequired");

                    b.Property<int?>("LoanPurposeClassification");

                    b.Property<string>("LoanPurposeClassificationOthers");

                    b.Property<int>("LoanTenureRequested");

                    b.Property<bool?>("OverDues");

                    b.Property<string>("PEPs");

                    b.Property<int>("PaymentFrequency");

                    b.Property<int>("Purpose");

                    b.Property<string>("PurposeOfLoanUtilization");

                    b.Property<string>("PurposeOfLoanUtilizationDetails");

                    b.Property<string>("ReasonOfDecineOthers");

                    b.Property<int?>("ReasonOfDecline");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("TotalInvestmentRequired");

                    b.Property<string>("clientID");

                    b.Property<int?>("clientStatus");

                    b.HasKey("Id");

                    b.ToTable("BusinessPlan");
                });

            modelBuilder.Entity("TFCLPortal.ClientStatuses.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("TFCLPortal.CoApplicantDetails.CoApplicantDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age");

                    b.Property<bool?>("AmlCftCheck");

                    b.Property<bool?>("AmlCftClearance");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("BusinessAddress");

                    b.Property<string>("BusinessName");

                    b.Property<string>("CNICNumber");

                    b.Property<DateTime?>("CnicExpiryDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("CreditBureauCheck");

                    b.Property<int?>("CreditBureauStatus");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("District");

                    b.Property<string>("EmployerName");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("MouzaOrTown");

                    b.Property<string>("PresentAddress");

                    b.Property<string>("Profession");

                    b.Property<string>("Province");

                    b.Property<string>("RealtionshipWithApplicant");

                    b.Property<string>("SDW");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("Tehsil");

                    b.Property<string>("UCNumber");

                    b.Property<string>("guarenteedAmountFi");

                    b.Property<bool?>("isGuarenteedLoanFi");

                    b.HasKey("Id");

                    b.ToTable("CoApplicantDetails");
                });

            modelBuilder.Entity("TFCLPortal.ColatteralGolds.CollateralGold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollateralOwnership");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateOfEvaluation");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_ColateralID");

                    b.Property<string>("GoldEvaluatorName");

                    b.Property<string>("GoldOwnerName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ItemDescriptionGold");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MarketValueInGram");

                    b.Property<string>("MarketValueTotalGold");

                    b.Property<string>("NoOFItemGold");

                    b.Property<string>("TotalGrossWeightGold");

                    b.Property<string>("TotalNetWeightGold");

                    b.HasKey("Id");

                    b.ToTable("CollateralGold");
                });

            modelBuilder.Entity("TFCLPortal.CollateralDetails.CollateralDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<int>("CollateralCount");

                    b.Property<int>("CollateralType");

                    b.Property<string>("CollateralTypeOthers");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenStatus");

                    b.Property<bool>("isNA");

                    b.HasKey("Id");

                    b.ToTable("CollateralDetail");
                });

            modelBuilder.Entity("TFCLPortal.CollateralFranchises.CollateralFranchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmountOfFranchiseAgreement");

                    b.Property<int>("CollateralOwnership");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateOfEvaluation");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_ColateralID");

                    b.Property<string>("FranchiseBranchCampusAddress");

                    b.Property<string>("FranchiseBranchCampusName");

                    b.Property<string>("FranchiseOwnerName");

                    b.Property<string>("FranchiserAddress");

                    b.Property<string>("FranchiserName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("CollateralFranchise");
                });

            modelBuilder.Entity("TFCLPortal.CollateralLandBuildings.CollateralLandBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcquisitionDate");

                    b.Property<DateTime?>("BuildSince");

                    b.Property<int>("CollateralOwnership");

                    b.Property<string>("CoveredArea");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateOfEvaluation");

                    b.Property<string>("DealerOneBusinessName");

                    b.Property<string>("DealerOneContactNumber");

                    b.Property<string>("DealerOneName");

                    b.Property<string>("DealerTwoBusinessName");

                    b.Property<string>("DealerTwoContactNumber");

                    b.Property<string>("DealerTwoName");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_ColateralID");

                    b.Property<string>("GovtEstimatedValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LandBuildingMarketPrice");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PropertyAddress");

                    b.Property<string>("PropertyOwnerName");

                    b.Property<int>("PropertyType");

                    b.Property<string>("PurchasePrice");

                    b.Property<string>("TotalArea");

                    b.HasKey("Id");

                    b.ToTable("CollateralLandBuilding");
                });

            modelBuilder.Entity("TFCLPortal.CollateralTDRs.CollateralTDR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmountTDR");

                    b.Property<string>("BankName");

                    b.Property<string>("BranchAddress");

                    b.Property<string>("BranchName");

                    b.Property<int>("CollateralOwnership");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateOfEvaluation");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_ColateralID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("TDRNo");

                    b.Property<string>("TDrOwnerName");

                    b.HasKey("Id");

                    b.ToTable("CollateralTDR");
                });

            modelBuilder.Entity("TFCLPortal.CollateralVehicles.CollateralVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChasisNo");

                    b.Property<int>("CollateralOwnership");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateOfEvaluation");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EngineNo");

                    b.Property<string>("EvaluatorBusinessName");

                    b.Property<string>("EvaluatorContactNumber");

                    b.Property<string>("EvaluatorName");

                    b.Property<int>("Fk_ColateralID");

                    b.Property<string>("HorsePowerCC");

                    b.Property<string>("InsuranceCompany");

                    b.Property<DateTime?>("InsuranceExpiryDate");

                    b.Property<string>("InsurancePolicyNo");

                    b.Property<string>("InsuredValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MAKE");

                    b.Property<string>("MarketValue");

                    b.Property<string>("ModelNo");

                    b.Property<string>("RegistrationNo");

                    b.Property<string>("VehicleOwnerName");

                    b.HasKey("Id");

                    b.ToTable("CollateralVehicle");
                });

            modelBuilder.Entity("TFCLPortal.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email");

                    b.Property<decimal>("GST");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NTN");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("TFCLPortal.ContactDetails.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateMobileNo");

                    b.Property<string>("AlternateMobileNoSelf");

                    b.Property<int>("ApplicationId");

                    b.Property<decimal?>("AreaOfResidenceSqFt");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("CurrentAddressSince");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FaxNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSamePermanent");

                    b.Property<string>("LandlineNo");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MobileNo");

                    b.Property<decimal?>("MonthlyRentSharingPercentage");

                    b.Property<decimal?>("MonthlyShare");

                    b.Property<int>("OwnershipStatus");

                    b.Property<string>("PresentAddress");

                    b.Property<int>("PresentDistrict");

                    b.Property<string>("PresentMouzaTown");

                    b.Property<string>("PresentNearestLandMark");

                    b.Property<int>("PresentProvince");

                    b.Property<string>("PresentTehsil");

                    b.Property<string>("PresentUCNo");

                    b.Property<DateTime?>("RentAgreementExpiryDate");

                    b.Property<int?>("RentAgreementSignatory");

                    b.Property<string>("RentAgreementSignatoryOthers");

                    b.Property<string>("RentAmount");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("permanentAddress");

                    b.Property<int>("permanentDistrict");

                    b.Property<string>("permanentMouzaTown");

                    b.Property<string>("permanentNearestLandMark");

                    b.Property<int>("permanentProvince");

                    b.Property<string>("permanentTehsil");

                    b.Property<string>("permanentUCNo");

                    b.HasKey("Id");

                    b.ToTable("ContactDetail");
                });

            modelBuilder.Entity("TFCLPortal.DescripentScreens.DescripentScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_CreaterUserId");

                    b.Property<int>("Fk_ScreenId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenCode");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("DescripentScreen");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.AcademicSessions.AcademicSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AcademicSession");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ApplicantReputations.ApplicantReputation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApplicantReputation");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ApplicantSources.ApplicantSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApplicantSource");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.BuildingStatuses.BuildingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BuildingStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.BusinessLegalStatuses.BusinessLegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BusinessLegalStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.BusinessTypes.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ClientBusinessClassifications.ClientBusinessClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClientBusinessClassification");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.CollateralOwnerships.CollateralOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CollateralOwnership");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.CollateralTypes.CollateralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CollateralType");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ContactPreferences.ContactPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ContactPreference");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.CreditBureauChecks.CreditBureauCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CreditBureauCheck");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.CreditCommettees.CreditCommettee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CreditCommettee");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Districts.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Fk_ProvinceId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.FundSources.FundSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FundSource");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Genders.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.LandTypes.LandType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LandTypes");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.LegalStatuses.LegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LegalStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.LoanPurposeClassifications.LoanPurposeClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LoanPurposeClassification");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.LoanTenureRequireds.LoanTenureRequired", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LoanTenureRequired");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.LoansPurpose.LoanPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LoanPurpose");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.MaritalStatuses.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.MobilizationStatuses.MobilizationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MobilizationStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.NatureOfBusinesses.NatureOfBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NatureOfBusiness");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Occupations.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Occupation");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.OtherSourceOfIncomes.OtherSourceOfIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OtherSourceOfIncome");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Ownership.OwnershipStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OwnershipStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.PaymentsFrequency.PaymentFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentFrequency");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ProductTypes.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("ShortCode");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.PropertyTypes.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Provinces.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.Qualifications.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ReasonForNotBeingInteresteds.ReasonForNotBeingInterested", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReasonForNotBeingInterested");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ReasonOfDeclines.ReasonOfDecline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReasonOfDecline");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.ReferenceChecks.ReferenceCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReferenceCheck");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.RentAgreementSignatories.RentAgreementSignatory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RentAgreementSignatory");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.RentAgreementSignatoryOthers.RentAgreementSignatoryOther", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RentAgreementSignatoryOther");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.RespondantDesignations.RespondantDesignation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RespondantDesignation");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.SchoolCategories.SchoolCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolCategory");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.SchoolClasses.SchoolClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolClass");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.SchoolLevels.SchoolLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolLevel");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.SchoolTypes.SchoolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolType");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.SpouseStatuses.SpouseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SpouseStatus");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.StudentsGender.StudentGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StudentGender");
                });

            modelBuilder.Entity("TFCLPortal.DynamicDropdowns.UtilityBillPayments.UtilityBillPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UtilityBillPayment");
                });

            modelBuilder.Entity("TFCLPortal.ExposureDetailChilds.ExposureDetailChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<int>("Fk_ExpoDetailID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("LoanAmount");

                    b.Property<decimal>("MonthlyInstallmentPayment");

                    b.Property<decimal>("OutstandingAmount");

                    b.Property<string>("TypeOfFacilityTE");

                    b.HasKey("Id");

                    b.ToTable("ExposureDetailChild");
                });

            modelBuilder.Entity("TFCLPortal.ExposureDetails.ExposureDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppNoTfclLoanGuarantee");

                    b.Property<string>("ApplicantNameTfclLoanGuarantee");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("CreditBureauGeneration");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ExistingBankExposure");

                    b.Property<DateTime?>("ExistingExposureAsOn");

                    b.Property<string>("GuaranteeTFCLAmount");

                    b.Property<string>("GuaranteedFiLoan");

                    b.Property<string>("GuaranteedTFCLLoan");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("TotalAmount");

                    b.Property<decimal>("TotalInstallmentpayment");

                    b.Property<string>("guaranteedAmountFI");

                    b.HasKey("Id");

                    b.ToTable("ExposureDetail");
                });

            modelBuilder.Entity("TFCLPortal.FilesUploads.FilesUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("BaseUrl");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ScreenCode");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.ToTable("FilesUpload");
                });

            modelBuilder.Entity("TFCLPortal.ForSDES.ForSDE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantReputationId");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Delayed");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DoubtfulComment");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KnowApplicantSince");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ObservationComment");

                    b.Property<string>("RecommendedGracePeriod");

                    b.Property<decimal>("RecommendedLoanAmount");

                    b.Property<string>("RecommendedTenure");

                    b.Property<string>("ScreenStatus");

                    b.Property<int>("UtilityBillPaymentId");

                    b.Property<string>("UtilizationOfLoan");

                    b.Property<int>("referenceCheckId");

                    b.HasKey("Id");

                    b.ToTable("ForSDE");
                });

            modelBuilder.Entity("TFCLPortal.GuarantorDetails.GuarantorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age");

                    b.Property<bool?>("AmlCftCheck");

                    b.Property<bool?>("AmlCftClearance");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("BusinessAddress");

                    b.Property<string>("BusinessName");

                    b.Property<string>("CNICNumber");

                    b.Property<DateTime?>("CnicExpiryDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool?>("CreditBureauCheck");

                    b.Property<int?>("CreditBureauStatus");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("District");

                    b.Property<string>("EmployerName");

                    b.Property<string>("FullName");

                    b.Property<string>("IncomeAvailableForInstallment");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("MonthlyIncome");

                    b.Property<string>("MouzaOrTown");

                    b.Property<string>("PresentAddress");

                    b.Property<string>("Profession");

                    b.Property<string>("Province");

                    b.Property<string>("RealtionshipWithApplicant");

                    b.Property<string>("SDW");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("Tehsil");

                    b.Property<string>("UCNumber");

                    b.Property<string>("guaranteedAmount");

                    b.Property<bool?>("guaranteedLoanFI");

                    b.HasKey("Id");

                    b.ToTable("GuarantorDetails");
                });

            modelBuilder.Entity("TFCLPortal.HouseholdIncomesExpenses.HouseholdIncomeExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Clothing");

                    b.Property<string>("Comments");

                    b.Property<string>("CommitteeInstallment");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Educational");

                    b.Property<string>("Food");

                    b.Property<string>("HouseRent");

                    b.Property<string>("HouseholdIncome");

                    b.Property<string>("Internet");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoanInstallment");

                    b.Property<string>("Medical");

                    b.Property<string>("NetTotal");

                    b.Property<string>("OtherHouseholdExpenses");

                    b.Property<string>("ProvisionalHouseholdExpenses");

                    b.Property<string>("RepairAndMentinence");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("TotalHouseHoldExpense");

                    b.Property<string>("Utilities");

                    b.HasKey("Id");

                    b.ToTable("HouseholdIncomeExpense");
                });

            modelBuilder.Entity("TFCLPortal.LoanAmortizations.LoanAmortization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("APR");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_Product");

                    b.Property<int>("GraceDays");

                    b.Property<decimal>("GraceDaysAmount");

                    b.Property<decimal>("IRR");

                    b.Property<decimal>("InstallmentPayment");

                    b.Property<decimal>("IntrestAmount");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("LoanAmount");

                    b.Property<DateTime>("LoanDisbursementDate");

                    b.Property<DateTime>("LoanStartDate");

                    b.Property<decimal>("MarkUp");

                    b.Property<decimal>("NetMarkup");

                    b.Property<string>("ScreenCode");

                    b.Property<string>("Status");

                    b.Property<int>("Tenure");

                    b.Property<decimal>("TotalInstallmentPayment");

                    b.HasKey("Id");

                    b.HasIndex("Fk_Product");

                    b.ToTable("LoanAmortization");
                });

            modelBuilder.Entity("TFCLPortal.LoanAmortizations.LoanAmortizationChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_LoanAmortization");

                    b.Property<DateTime>("InstallmentDueDate");

                    b.Property<DateTime>("InstallmentPaidDate");

                    b.Property<int>("InstallmentSerial");

                    b.Property<decimal>("InterestAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LateDayDFD");

                    b.Property<string>("PaymentStatus");

                    b.Property<decimal>("PrincipalAmount");

                    b.Property<decimal>("RemainingBalance");

                    b.Property<decimal>("TotalInstallment");

                    b.Property<int>("TotalInstallmentCount");

                    b.HasKey("Id");

                    b.HasIndex("Fk_LoanAmortization");

                    b.ToTable("LoanAmortizationChild");
                });

            modelBuilder.Entity("TFCLPortal.LoanEligibilities.LoanEligibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedLtvCategory");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("CollateralValue");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InstallmentRatio");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoanAmountRequried");

                    b.Property<string>("LoanDeduction");

                    b.Property<string>("LoanTenureRequested");

                    b.Property<string>("Mark_Up");

                    b.Property<string>("MaxFinancingAllowedLTV");

                    b.Property<string>("MaxIncomeForTFCL");

                    b.Property<string>("MonthlyBusinessExpenses");

                    b.Property<string>("MonthlyBusinessIncome");

                    b.Property<string>("MonthlyPaymentEmi");

                    b.Property<string>("MontlyHouseholdIncome");

                    b.Property<string>("NetBusinessIncome");

                    b.Property<string>("NetTakeHomeBusinessIncome");

                    b.Property<string>("NuOfInstallmentPerYear");

                    b.Property<string>("PerProfitShare");

                    b.Property<string>("ScreenStatus");

                    b.Property<string>("StatusEmi");

                    b.Property<string>("StatusLTV");

                    b.HasKey("Id");

                    b.ToTable("LoanEligibilities");
                });

            modelBuilder.Entity("TFCLPortal.Mobilizations.Mobilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademicSession");

                    b.Property<string>("Address");

                    b.Property<bool>("AnyOtherBusiness");

                    b.Property<string>("ApplicantSource");

                    b.Property<int>("AreaOfSchoolMarla");

                    b.Property<string>("AverageFee");

                    b.Property<string>("BuildingStatus");

                    b.Property<string>("CNICNo");

                    b.Property<string>("ClientName");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DecesionMonth");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("Fk_BranchID");

                    b.Property<string>("FranchiserName");

                    b.Property<int>("InteractionNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LandLineNo");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MentionProviderInterest");

                    b.Property<string>("MobileNo");

                    b.Property<int>("MobilizationStatus");

                    b.Property<int>("MobilizationTableID");

                    b.Property<DateTime?>("NextMeeting");

                    b.Property<int>("NoOfStaff");

                    b.Property<int>("NoOfStudent");

                    b.Property<string>("OtherSourceIncome");

                    b.Property<string>("OtherSourceIncomeOthers");

                    b.Property<string>("PersonNotInterested");

                    b.Property<string>("PrefferedProduct");

                    b.Property<string>("PrefferedProvider");

                    b.Property<string>("PrefixLable");

                    b.Property<int>("ProductType");

                    b.Property<string>("Remarks");

                    b.Property<string>("RespondantDesignation");

                    b.Property<string>("RespondantDesignationOthers");

                    b.Property<int>("SchoolCategory");

                    b.Property<string>("SchoolName");

                    b.Property<string>("ScreenStatus");

                    b.Property<int?>("TDSBusinessNature");

                    b.Property<int>("UpdateRecordId");

                    b.Property<int?>("finalDecisionMonths");

                    b.Property<bool>("interstedOtherProductProvider");

                    b.Property<bool>("isAvailedLoan");

                    b.Property<bool>("isFranchise");

                    b.Property<string>("otherApplicantSource");

                    b.Property<string>("otherNotbeingIntersted");

                    b.Property<string>("otherSchoolBuildingStatus");

                    b.HasKey("Id");

                    b.ToTable("MobilizationTable");
                });

            modelBuilder.Entity("TFCLPortal.MobilizationsLogs.MobilizationsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicSession");

                    b.Property<string>("Address");

                    b.Property<bool>("AnyOtherBusiness");

                    b.Property<string>("ApplicantSource");

                    b.Property<int>("AreaOfSchoolMarla");

                    b.Property<string>("AverageFee");

                    b.Property<string>("BuildingStatus");

                    b.Property<string>("CNICNo");

                    b.Property<string>("ClientName");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DecesionMonth");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("Fk_BranchID");

                    b.Property<string>("FranchiserName");

                    b.Property<int>("InteractionNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LandLineNo");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MentionProviderInterest");

                    b.Property<string>("MobileNo");

                    b.Property<int>("MobilizationStatus");

                    b.Property<int>("MobilizationTableID");

                    b.Property<DateTime>("NextMeeting");

                    b.Property<int>("NoOfStaff");

                    b.Property<int>("NoOfStudent");

                    b.Property<int>("OtherSourceIncome");

                    b.Property<string>("OtherSourceIncomeOthers");

                    b.Property<string>("PersonNotInterested");

                    b.Property<string>("PrefferedProduct");

                    b.Property<string>("PrefferedProvider");

                    b.Property<string>("PrefixLable");

                    b.Property<int>("ProductType");

                    b.Property<string>("Remarks");

                    b.Property<string>("RespondantDesignation");

                    b.Property<string>("RespondantDesignationOthers");

                    b.Property<int>("SchoolCategory");

                    b.Property<string>("SchoolName");

                    b.Property<string>("ScreenStatus");

                    b.Property<bool>("isAvailedLoan");

                    b.Property<bool>("isFranchise");

                    b.HasKey("Id");

                    b.ToTable("MobilizationLogTable");
                });

            modelBuilder.Entity("TFCLPortal.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("TFCLPortal.OtherDetails.OtherDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount");

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MotherMaidenName");

                    b.Property<string>("NTNNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<string>("OtherNationality");

                    b.Property<int>("OtherOccupation");

                    b.Property<string>("OtherOccupationDD");

                    b.Property<int>("OtherSourceOfFund");

                    b.Property<string>("OtherSourceOfFundDD");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.ToTable("OtherDetail");
                });

            modelBuilder.Entity("TFCLPortal.PersonalDetails.PersonalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age");

                    b.Property<bool?>("AgeApprovalTaken");

                    b.Property<string>("ApplicantName");

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CNIC");

                    b.Property<DateTime?>("CNICExpiry");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("MotherMaidenName");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<int?>("NumberOfDependants");

                    b.Property<int>("NumberOfDependents");

                    b.Property<string>("OtherGenderDD");

                    b.Property<string>("OtherNationality");

                    b.Property<string>("OtherQualificationDD");

                    b.Property<string>("ParentName");

                    b.Property<string>("PersonalNTN");

                    b.Property<int>("Qualification");

                    b.Property<string>("SalesTaxNumber");

                    b.Property<int?>("SchoolGoingDependants");

                    b.Property<string>("ScreenStatus");

                    b.Property<int?>("SpouseStatus");

                    b.Property<bool?>("isActiveTaxPayer");

                    b.HasKey("Id");

                    b.ToTable("PersonalDetail");
                });

            modelBuilder.Entity("TFCLPortal.Preferences.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comments");

                    b.Property<string>("CommentsBox");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KnowApplicantSince");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("PresentAddress");

                    b.Property<string>("ScreenStatus");

                    b.HasKey("Id");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("TFCLPortal.ProductMarkupRates.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeMax");

                    b.Property<int>("AgeMin");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ProductDetail");

                    b.Property<string>("ProductName");

                    b.Property<string>("ShortCode");

                    b.Property<int>("SlabMax");

                    b.Property<int>("SlabMin");

                    b.Property<string>("Slabs");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("TFCLPortal.ProductMarkupRates.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_ProductId");

                    b.Property<string>("FreshClientLoanStatus");

                    b.Property<decimal>("FreshClientSecureMarkupRate");

                    b.Property<decimal>("FreshClientUnSecureMarkupRate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("RepeatClientLoanStatus");

                    b.Property<decimal>("RepeatClientSecureMarkupRate");

                    b.Property<decimal>("RepeatClientUnSecureMarkupRate");

                    b.Property<int>("SlabMax");

                    b.Property<int>("SlabMin");

                    b.Property<string>("Slabs");

                    b.Property<string>("Tenure");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("TFCLPortal.TDSBusinessNatures.TDSBusinessNature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TDSBusinessNature");
                });

            modelBuilder.Entity("TFCLPortal.TaleemDostSahulatProduct.BusinessDetailsTDS.BusinessDetailTDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<string>("BusinessAddress");

                    b.Property<string>("BusinessDetail");

                    b.Property<string>("BusinessName");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<int>("BusinessPlaceOwnership");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("CurrentAddressSince");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("District");

                    b.Property<DateTime>("EstablishedSince");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("Latitude");

                    b.Property<int>("LegalStatus");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("MonthlyRent");

                    b.Property<string>("MouzaTown");

                    b.Property<int>("NatureOfBusiness");

                    b.Property<string>("NearestLandMark");

                    b.Property<string>("PercentageOfShareHolding");

                    b.Property<string>("Province");

                    b.Property<string>("Tehsil");

                    b.Property<string>("UnionCouncil");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPlaceOwnership");

                    b.HasIndex("LegalStatus");

                    b.HasIndex("NatureOfBusiness");

                    b.ToTable("BusinessDetailTDS");
                });

            modelBuilder.Entity("TFCLPortal.TaleemDostSahulatProduct.FinancialInformationsTDS.FinancialInformationTDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("InstalmentRatio");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MonthlyBEEntertainment");

                    b.Property<int>("MonthlyBELoanInstallmentPayments");

                    b.Property<int>("MonthlyBEOtherBusinessExpenses");

                    b.Property<int>("MonthlyBEProvisionOfExpenses10");

                    b.Property<int>("MonthlyBEPurchases");

                    b.Property<int>("MonthlyBERentAmount");

                    b.Property<int>("MonthlyBERepairMaintinance");

                    b.Property<int>("MonthlyBESalaryWages");

                    b.Property<int>("MonthlyBETransportCarriage");

                    b.Property<int>("MonthlyBEUtilities");

                    b.Property<int>("MonthlyBIOtherBusinessIncomes");

                    b.Property<int>("MonthlyBISales");

                    b.Property<int>("MonthlyHECommitteeInstalment");

                    b.Property<int>("MonthlyHEEducational");

                    b.Property<int>("MonthlyHEHouseRent");

                    b.Property<int>("MonthlyHELiving");

                    b.Property<int>("MonthlyHELoanInstallmentPayment");

                    b.Property<int>("MonthlyHEUtiliities");

                    b.Property<int>("MonthlyHIAnyOtherIncome");

                    b.Property<int>("MonthlyHINetBusinessIncome");

                    b.Property<int>("MonthlyHISalaryPensionIncome");

                    b.Property<int>("MonthlyHIaFmilyIncome");

                    b.Property<int>("MonthlyLoanInstalment");

                    b.Property<int>("MonthylyHIRentalIncome");

                    b.Property<int>("NetBusinessIncomes");

                    b.Property<int>("NetHouseholdDisposableIncome");

                    b.Property<int>("OtherHouseholdExpenses");

                    b.Property<int>("ProvisionalHouseholdExpenses");

                    b.Property<int>("TotalBusinessExpenses");

                    b.Property<int>("TotalBusinessIncomes");

                    b.Property<int>("TotalHouseholdExpenses");

                    b.Property<int>("TotalHousholdIncome");

                    b.HasKey("Id");

                    b.ToTable("FinancialInformationTDS");
                });

            modelBuilder.Entity("TFCLPortal.TaleemDostSahulatProduct.SalesPurchasesTDS.SalesPurchaseTDS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualPurchasesAmount");

                    b.Property<int>("AnnualPurchasesTotal");

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DailyPurchasesAmount");

                    b.Property<int>("DailyPurchasesTotal");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FortnightlyPurchasesAmount");

                    b.Property<int>("FortnightlyPurchasesTotal");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MonthlyPurchasesAmount");

                    b.Property<int>("MonthlyPurchasesTotal");

                    b.Property<int>("MonthlySalesLowMonthSales");

                    b.Property<int>("MonthlySalesNormalMonthSales");

                    b.Property<int>("MonthlySalesPeakMonthSales");

                    b.Property<int>("NoOfMonthsLowMonthSales");

                    b.Property<int>("NoOfMonthsNormalMonthSales");

                    b.Property<int>("NoOfMonthsPeakMonthSales");

                    b.Property<int>("PerMonthAverageSales");

                    b.Property<int>("QuaterlyPurchasesAmount");

                    b.Property<int>("QuaterlyPurchasesTotal");

                    b.Property<int>("SemiAnnualPurchasesAmount");

                    b.Property<int>("SemiAnnualPurchasesTotal");

                    b.Property<int>("TotalAnnualSales");

                    b.Property<int>("TotalDailySales");

                    b.Property<int>("TotalMonthlySales");

                    b.Property<int>("TotalNoOfDaysRemainsOpenPerWeek");

                    b.Property<int>("TotalPurchases");

                    b.Property<int>("TotalSalesConsideredLowerofTwo");

                    b.Property<int>("TotalSalesLowMonthSales");

                    b.Property<int>("TotalSalesNormalMonthSales");

                    b.Property<int>("TotalSalesPeakMonthSales");

                    b.Property<int>("WeeklyPurchasesAmount");

                    b.Property<int>("WeeklyPurchasesTotal");

                    b.Property<int>("totalWeeklySales");

                    b.HasKey("Id");

                    b.ToTable("SalesPurchaseTDS");
                });

            modelBuilder.Entity("TFCLPortal.TaleemSchoolAsasahs.TaleemSchoolAsasah", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("TaleemSchoolAsasah");
                });

            modelBuilder.Entity("TFCLPortal.TaleemSchoolSarmayas.TaleemSchoolSarmaya", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("TaleemSchoolSarmaya");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.ApplicationDescripantDeclineState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BccId");

                    b.Property<int>("Fk_UserId");

                    b.Property<int>("Fk_WorkFlowId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("State");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Fk_WorkFlowId");

                    b.ToTable("ApplicationDescripantDeclineState");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BADataCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<int>("BA_UserId");

                    b.Property<string>("BaseUrl");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DocumentKey");

                    b.Property<string>("DocumentUrl");

                    b.Property<int>("Fk_UserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("SDE_UserId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("BADataCheck");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BccState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BccId");

                    b.Property<int>("Fk_UserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("BccState");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BranchCreditCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("SDE1_UserId");

                    b.Property<long?>("SDE2_UserId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SDE1_UserId");

                    b.HasIndex("SDE2_UserId");

                    b.ToTable("BranchCreditCommittee");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.WorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("WorkFlow");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.WorkFlowApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Fk_BccId");

                    b.Property<int>("Fk_UserId");

                    b.Property<int?>("Fk_WorkFlowId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Fk_WorkFlowId");

                    b.ToTable("WorkFlowApplicationState");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TFCLPortal.Applications.Applicationz", b =>
                {
                    b.HasOne("TFCLPortal.Branches.Branch", "Brances")
                        .WithMany()
                        .HasForeignKey("FK_branchid");
                });

            modelBuilder.Entity("TFCLPortal.Authorization.Roles.Role", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TFCLPortal.Authorization.Users.User", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TFCLPortal.Branches.Branch", b =>
                {
                    b.HasOne("TFCLPortal.Companies.Company", "Comapny")
                        .WithMany("BranchDetails")
                        .HasForeignKey("FK_companyid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.DescripentScreens.DescripentScreen", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "applicationz")
                        .WithMany("DescripentScreens")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("TFCLPortal.LoanAmortizations.LoanAmortization", b =>
                {
                    b.HasOne("TFCLPortal.DynamicDropdowns.ProductTypes.ProductType", "Product")
                        .WithMany()
                        .HasForeignKey("Fk_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.LoanAmortizations.LoanAmortizationChild", b =>
                {
                    b.HasOne("TFCLPortal.LoanAmortizations.LoanAmortization", "LoanAmortization")
                        .WithMany("LoanAmortizationChilds")
                        .HasForeignKey("Fk_LoanAmortization")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TFCLPortal.ProductMarkupRates.ProductDetail", b =>
                {
                    b.HasOne("TFCLPortal.ProductMarkupRates.Product", "Products")
                        .WithMany("ProductDetails")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.TaleemDostSahulatProduct.BusinessDetailsTDS.BusinessDetailTDS", b =>
                {
                    b.HasOne("TFCLPortal.DynamicDropdowns.Ownership.OwnershipStatus", "BusinessPlacesOwnership")
                        .WithMany()
                        .HasForeignKey("BusinessPlaceOwnership")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFCLPortal.DynamicDropdowns.BusinessLegalStatuses.BusinessLegalStatus", "BusinessLegalStatus")
                        .WithMany()
                        .HasForeignKey("LegalStatus")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFCLPortal.DynamicDropdowns.NatureOfBusinesses.NatureOfBusiness", "NatureOfBusinesses")
                        .WithMany()
                        .HasForeignKey("NatureOfBusiness")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.ApplicationDescripantDeclineState", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFCLPortal.WorkFlows.WorkFlow", "WorkFlows")
                        .WithMany()
                        .HasForeignKey("Fk_WorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BADataCheck", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BccState", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.BranchCreditCommittee", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFCLPortal.Authorization.Users.User", "SDE1_User")
                        .WithMany()
                        .HasForeignKey("SDE1_UserId");

                    b.HasOne("TFCLPortal.Authorization.Users.User", "SDE2_User")
                        .WithMany()
                        .HasForeignKey("SDE2_UserId");
                });

            modelBuilder.Entity("TFCLPortal.WorkFlows.WorkFlowApplicationState", b =>
                {
                    b.HasOne("TFCLPortal.Applications.Applicationz", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFCLPortal.WorkFlows.WorkFlow", "WorkFlows")
                        .WithMany()
                        .HasForeignKey("Fk_WorkFlowId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("TFCLPortal.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
