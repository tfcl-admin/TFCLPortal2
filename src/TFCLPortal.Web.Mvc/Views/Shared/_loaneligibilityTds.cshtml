@model TFCLPortal.TDSLoanEligibilities.Dto.TDSLoanEligibilityListDto
<style>
    .modal-title {
        text-align: center;
        width: 100%;
    }

    .text-bold {
        font-weight: 600;
    }

    .text-red {
        color: red !important;
        border-top: 1px solid #008c45;
    }

    .text-green {
        color: green !important;
        border-top: 1px solid #008c45;
    }
</style>
@if (@Model != null)
{
<div class="tab_content">
    <input type="hidden" id="ApplicationId" value="@Model.ApplicationId" />

    <div class="row">
        <div class="col-md-3">
            <p class="detailHeading">loan amount Recommended</p>
            <p class="detailText">@(Model.LoanAmountRequried == null || Model.LoanAmountRequried == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.LoanAmountRequried)))</p>
        </div>
        <div class="col-md-3">
            <p class="detailHeading">loan Tenure requested</p>
            <p class="detailText">@(Model.LoanTenureRequested == null || Model.LoanTenureRequested == ""  ? "--" : string.Format("{0:#,##0}", decimal.Parse(Model.LoanTenureRequested)))</p>
        </div>
        <div class="col-md-3">
            <p class="detailHeading">number of installment(s) per year</p>
            <p class="detailText">@(Model.NuOfInstallmentPerYear == null || Model.NuOfInstallmentPerYear == ""  ? "--" : string.Format("{0:#,##0}", decimal.Parse(Model.NuOfInstallmentPerYear)))</p>
        </div>
        <div class="col-md-3">
            <p class="detailHeading">mark-up (%)</p>
            <p class="detailText">@(Model.Mark_Up == null || Model.Mark_Up == ""  ? "--" : string.Format("{0:#,##0.##}%", decimal.Parse(Model.Mark_Up)))</p>
        </div>
    </div>
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading">
                Monthly Business Sales
            </p>
            <p class="detailText">@(Model.MonthlyBusinessSale == null || Model.MonthlyBusinessSale == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyBusinessSale)))</p>
        </div>

        <div class="col-md-4">
            <p class="detailHeading">
                Sharing %age
            </p>
            <p class="detailText">@(Model.MonthlyBusinessSaleSharingPercentage == null || Model.MonthlyBusinessSaleSharingPercentage == ""  ? "--" : string.Format("{0:#,##0.##}%", decimal.Parse(Model.MonthlyBusinessSaleSharingPercentage)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Considered Monthly Business Sales
            </p>
            <p class="detailText">@(Model.MonthlyBusinessSaleConsidered == null || Model.MonthlyBusinessSaleConsidered == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyBusinessSaleConsidered)))</p>
        </div>
    </div>
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading">
                Monthly Expenses
            </p>
            <p class="detailText">@(Model.MonthlyBusinessExpenses == null || Model.MonthlyBusinessExpenses == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyBusinessExpenses)))</p>
        </div>

        <div class="col-md-4">
            <p class="detailHeading">
                Sharing %age
            </p>
            <p class="detailText">@(Model.MonthlyBusinessExpensesSharingPercentage == null || Model.MonthlyBusinessExpensesSharingPercentage == ""  ? "--" : string.Format("{0:#,##0.##}%", decimal.Parse(Model.MonthlyBusinessExpensesSharingPercentage)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Considered Monthly Expenses
            </p>
            <p class="detailText">@(Model.MonthlyBusinessExpensesConsidered == null || Model.MonthlyBusinessExpensesConsidered == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyBusinessExpensesConsidered)))</p>
        </div>

    </div>
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading">
                Monthly Income
            </p>
            <p class="detailText">@(Model.MonthlyIncome == null || Model.MonthlyIncome == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyIncome)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading">
                Other Income
            </p>
            <p class="detailText">@(Model.OtherIncome == null || Model.OtherIncome == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.OtherIncome)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Gross Business Income
            </p>
            <p class="detailText ">@(Model.GrossBusinessIncome == null || Model.GrossBusinessIncome == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.GrossBusinessIncome)))</p>
        </div>
    </div>
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading">
                Monthly Exposure
            </p>
            <p class="detailText">@(Model.MonthlyExposure == null || Model.MonthlyExposure == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MonthlyExposure)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading">
                Net Business Income
            </p>
            <p class="detailText">@(Model.NetBusinessIncome == null || Model.NetBusinessIncome == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.NetBusinessIncome)))</p>
        </div>
    </div>
    
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading">
                Household Expenses
            </p>
            <p class="detailText">@(Model.HouseholdExpenses == null || Model.HouseholdExpenses == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.HouseholdExpenses)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading">
                Max Income for TFCL Payment
            </p>
            <p class="detailText">@(Model.MaxIncomeForTfclPayment == null || Model.MaxIncomeForTfclPayment == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MaxIncomeForTfclPayment)))</p>
        </div>
    </div>
    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                TFCL EMI Payment
            </p>
            <p class="detailText">@(Model.TfclEmiPayment == null || Model.TfclEmiPayment == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.TfclEmiPayment)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Instalment Ratio (%)
            </p>
            <p class="detailText">@(Model.InstallmentRatio == null || Model.InstallmentRatio == ""  ? "--" : string.Format("{0:#,##0.##}%", decimal.Parse(Model.InstallmentRatio)))</p>
        </div>
    </div>


    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                All Collaterals Value
            </p>
            <p class="detailText">@(Model.CollateralValue == null || Model.CollateralValue == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.CollateralValue)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading">
                Actual LTV %age
            </p>
            <p class="detailText">@(Model.ActualLtvPercentage == null || Model.ActualLtvPercentage == ""  ? "--" : string.Format("{0:#,##0.##} %", decimal.Parse(Model.ActualLtvPercentage)))</p>
        </div>
        <div class="col-md-4">
            <p class="detailHeading">
                Max Financing Allowed as per LTV 
            </p>
            <p class="detailText">@(Model.MaxFinancingAllowedLTV == null || Model.MaxFinancingAllowedLTV == ""  ? "--" : string.Format("{0:#,##0.##}", decimal.Parse(Model.MaxFinancingAllowedLTV)))</p>
        </div>
    </div>

    <div class="row pt-5">
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Loan Eligibility Status On EMI
            </p>

            @if (Model.LoanEligibilityStatusOnEMI == null || Model.LoanEligibilityStatusOnEMI == "")
            {
                <p class="detailText">N/A</p>
            }
            else if (Model.LoanEligibilityStatusOnEMI == "Eligible")
            {
                <p class="detailText text-green"> &#10004; ELIGIBLE</p>
            }
            else if (Model.LoanEligibilityStatusOnEMI == "Not Eligible")
            {
                <p class="detailText text-red"> &#10008; NOT ELIGIBLE</p>
            }
        </div>
        <div class="col-md-4">
            <p class="detailHeading text-bold">
                Loan Eligibility Status On LTV
            </p>

            @if (Model.LoanEligibilityStatusOnLTV == null || Model.LoanEligibilityStatusOnLTV == "")
            {
                <p class="detailText">N/A</p>
            }
            else if (Model.LoanEligibilityStatusOnLTV == "Eligible")
            {
                <p class="detailText text-green"> &#10004; ELIGIBLE</p>
            }
            else if (Model.LoanEligibilityStatusOnLTV == "Not Eligible")
            {
                <p class="detailText text-red"> &#10006; NOT ELIGIBLE</p>
            }
        </div>
    </div>


    <div class="col-md-12" style="text-align: right;">
        <a id="screenBtnLE" href="" data-toggle="modal" data-target="#_LoanEligibility_approved" class="btn btn-sm btn-outline-success" title="Screen">Screen<span></span></a>
        <a id="discrepentBtnLE" href="" data-toggle="modal" data-target="#_LoanEligibility_discrepant" class="btn btn-sm btn-outline-danger" title="Discrepent">Discrepent<span></span></a>
    </div>

</div>
}
else
{
    <div class="tab_content" style="padding: 15px 20px">
        <div class="row">
            <span style="text-align: center;width: 100%;color: black;font-weight: bold;">Sorry, No Loan Eligiblity is found againt this application.</span>
        </div>
    </div>
}


<!--Approved Modal -->
<div class="modal fade" id="_LoanEligibility_approved" tabindex="-1" role="dialog" style="z-index: 1100;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Approved Confirmation</div>
                <button type="button" class="close" data-dismiss="modal" aria-div="close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to mark this form Screened?
            </div>
            <div class="modal-footer">
                <button id="btnScreenLE" type="button" class="btn btn-success bg1 ef1">Mark Screened</button>
                <button data-dismiss="modal" type="button" class="btn btn-danger bg1 ef1">Cancel</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<!--discrepent Modal -->
<div class="modal fade" id="_LoanEligibility_discrepant" tabindex="-1" role="dialog" style="z-index: 1100;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Discrepent Confirmation</div>
                <button type="button" class="close" data-dismiss="modal" aria-div="close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea placeholder="Type Reason" id="commentIdLE"></textarea>
                <span class="text-danger" style="display:none" id="comment_errorLE">this field is required</span>
            </div>
            <div class="modal-footer">
                <button type="button" id="btndiscrepentLE" class="btn btn-success bg1 ef1">Mark Discrepent</button>
                <button type="button" class="btn btn-danger bg1 ef1" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<script>

    $('#commentId').attr('required', 'required');

    $(document).ready(function () {
        //alert('@ViewBag.PersonalAction');
        btnChange('@ViewBag.LoanEligibiltyAction');
    });


    function btnChange(currentState) {
        //alert(currentState);
        if (currentState == "Screened") {
            $('#screenBtnLE').html("<i class='fa fa-check'></i>  Marked Screened");
            $('#discrepentBtnLE').html("Discrepent");
        }
        else if (currentState == "Discrepent") {
            $('#discrepentBtnLE').html("<i class='fa fa-times'></i> Marked Discrepent");
            $('#screenBtnLE').html("Screen");
        }
        else if (currentState == "Hide") {
            $('#screenBtnLE').toggleClass("d-none");
            $('#discrepentBtnLE').toggleClass("d-none");
        }
    }

    $('#btnScreenLE').click(function () {
        debugger;
        var comment = $('#commentIdLE').val();
        var Id = $('#ApplicationId').val();
            $.ajax({
                    type: 'POST',
                    datatype: "json",
                    contenttype: 'application/json; charset=utf-8',
                    url: '@Url.Content("~/Dashboard/MarkScreened")',
                data: { 'ApplicationId': Id, 'Screen': 'LOAN ELIGIBILITY'} ,
                success: function (data) {



                    $('.close').click();

                    if (data.result.includes("successfully")) {
                        abp.notify.success(data.result, 'Mark Screened');
                    }
                    else {
                        abp.notify.info(data.result, 'Mark Screened');
                    }

                    btnChange("Screened");


                    },
                    error: function (data) {
                        debugger
                        abp.notify.error(data.result, 'Error');
                     }


                });
    });
    $('#btndiscrepentLE').click(function () {
        debugger;
        if (!$('#commentIdLE').val()) {
            $('#comment_errorLE').css("display", "block");;
            return false;
        } else {
            $('#comment_errorLE').css("display", "none");
        }
        var comment = $('#commentIdLE').val();
        var Id = $('#ApplicationId').val();
            $.ajax({
                    type: 'POST',
                    datatype: "json",
                    contenttype: 'application/json; charset=utf-8',
                    url: '@Url.Content("~/Dashboard/MarkDiscrepent")',
                data: { 'ApplicationId': Id, 'Screen': 'LOAN ELIGIBILITY','Reason': comment },
                success: function (data) {

                        $('.close').click();

                        if (data.result.includes("successfully")) {
                            abp.notify.success(data.result, 'Mark Discrepent');

                        }
                        else {
                            abp.notify.info(data.result, 'Mark Discrepent');
                    }

                    btnChange("Discrepent");

                    $('#commentIdLE').val("");

                    },
                    error: function (data) {
                        debugger;
                        abp.notify.error(data.result, 'Error');
                    }
                });
        });
</script>